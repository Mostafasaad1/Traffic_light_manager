
project3_0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002b2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000326  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  00000326  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000326  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000358  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007da  00000000  00000000  00000404  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005f6  00000000  00000000  00000bde  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000059d  00000000  00000000  000011d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000108  00000000  00000000  00001774  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000353  00000000  00000000  0000187c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000010c  00000000  00000000  00001bcf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00001cdb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 50 01 	call	0x2a0	; 0x2a0 <main>
  74:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <Delayf>:
#ifndef Flag_b_1
#include "App_init.h"

int Delayf(){
	//If flag is set toggle the led
	while((TIFR & (1<<OCF1A)) == 0);// wait till the timer overflow flag is SET
  7c:	08 b6       	in	r0, 0x38	; 56
  7e:	04 fe       	sbrs	r0, 4
  80:	fd cf       	rjmp	.-6      	; 0x7c <Delayf>
	TCNT1 = 0;
  82:	1d bc       	out	0x2d, r1	; 45
  84:	1c bc       	out	0x2c, r1	; 44
	TIFR |= (1<<OCF1A) ; //clear timer1 overflow flag
  86:	88 b7       	in	r24, 0x38	; 56
  88:	80 61       	ori	r24, 0x10	; 16
  8a:	88 bf       	out	0x38, r24	; 56
	return 0 ;
}
  8c:	80 e0       	ldi	r24, 0x00	; 0
  8e:	90 e0       	ldi	r25, 0x00	; 0
  90:	08 95       	ret

00000092 <blinking_norm>:

void blinking_norm(){
	switch (Flag_b_1)
  92:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  96:	81 30       	cpi	r24, 0x01	; 1
  98:	81 f0       	breq	.+32     	; 0xba <blinking_norm+0x28>
  9a:	28 f0       	brcs	.+10     	; 0xa6 <blinking_norm+0x14>
  9c:	82 30       	cpi	r24, 0x02	; 2
  9e:	b9 f0       	breq	.+46     	; 0xce <blinking_norm+0x3c>
  a0:	84 30       	cpi	r24, 0x04	; 4
  a2:	f9 f0       	breq	.+62     	; 0xe2 <blinking_norm+0x50>
  a4:	27 c0       	rjmp	.+78     	; 0xf4 <blinking_norm+0x62>
	{
		case 0:
		PORTA = 0b00000100; // Green
  a6:	84 e0       	ldi	r24, 0x04	; 4
  a8:	8b bb       	out	0x1b, r24	; 27
		PORTB = 0b00000001;
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	88 bb       	out	0x18, r24	; 24
		Flag_b_1++;
  ae:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  b2:	8f 5f       	subi	r24, 0xFF	; 255
  b4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		break;
  b8:	23 c0       	rjmp	.+70     	; 0x100 <blinking_norm+0x6e>
		case 1:
		PORTA = 0b00000010; // Yellow
  ba:	82 e0       	ldi	r24, 0x02	; 2
  bc:	8b bb       	out	0x1b, r24	; 27
		PORTB = 0b00000001;
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	88 bb       	out	0x18, r24	; 24
		Flag_b_1++;
  c2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  c6:	8f 5f       	subi	r24, 0xFF	; 255
  c8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		break;
  cc:	19 c0       	rjmp	.+50     	; 0x100 <blinking_norm+0x6e>
		case 2:
		PORTA = 0b00000001; // Red
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	8b bb       	out	0x1b, r24	; 27
		PORTB = 0b00000100;
  d2:	84 e0       	ldi	r24, 0x04	; 4
  d4:	88 bb       	out	0x18, r24	; 24
		Flag_b_1++;
  d6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  da:	8f 5f       	subi	r24, 0xFF	; 255
  dc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		break;
  e0:	0f c0       	rjmp	.+30     	; 0x100 <blinking_norm+0x6e>
		case 4:
		PORTA = 0b00000000; // off
  e2:	1b ba       	out	0x1b, r1	; 27
		PORTB = 0b00000001;
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	88 bb       	out	0x18, r24	; 24
		Flag_b_1++;
  e8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  ec:	8f 5f       	subi	r24, 0xFF	; 255
  ee:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		break;
  f2:	06 c0       	rjmp	.+12     	; 0x100 <blinking_norm+0x6e>
		default:
		PORTA = 0b00000010; // Yellow
  f4:	82 e0       	ldi	r24, 0x02	; 2
  f6:	8b bb       	out	0x1b, r24	; 27
		PORTB = 0b00000001;
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	88 bb       	out	0x18, r24	; 24
		Flag_b_1 =0;
  fc:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		break;
		
	}
Delayf();}
 100:	0e 94 3e 00 	call	0x7c	; 0x7c <Delayf>
 104:	08 95       	ret

00000106 <blinking>:

void blinking(){
	switch (Flag_b_1)
 106:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 10a:	81 30       	cpi	r24, 0x01	; 1
 10c:	49 f0       	breq	.+18     	; 0x120 <blinking+0x1a>
 10e:	28 f0       	brcs	.+10     	; 0x11a <blinking+0x14>
 110:	82 30       	cpi	r24, 0x02	; 2
 112:	49 f0       	breq	.+18     	; 0x126 <blinking+0x20>
 114:	84 30       	cpi	r24, 0x04	; 4
 116:	51 f0       	breq	.+20     	; 0x12c <blinking+0x26>
 118:	0b c0       	rjmp	.+22     	; 0x130 <blinking+0x2a>
	{
		case 0:
		PORTA = 0b00000100; // Green
 11a:	84 e0       	ldi	r24, 0x04	; 4
 11c:	8b bb       	out	0x1b, r24	; 27
		break;
 11e:	0a c0       	rjmp	.+20     	; 0x134 <blinking+0x2e>
		case 1:
		PORTA = 0b00000010; // Yellow
 120:	82 e0       	ldi	r24, 0x02	; 2
 122:	8b bb       	out	0x1b, r24	; 27
		break;
 124:	07 c0       	rjmp	.+14     	; 0x134 <blinking+0x2e>
		case 2:
		PORTA = 0b00000001; // Red
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	8b bb       	out	0x1b, r24	; 27
		break;
 12a:	04 c0       	rjmp	.+8      	; 0x134 <blinking+0x2e>
		case 4:
		PORTA = 0b00000000; // off
 12c:	1b ba       	out	0x1b, r1	; 27
		break;
 12e:	02 c0       	rjmp	.+4      	; 0x134 <blinking+0x2e>
		default:
		PORTA = 0b00000010; // Yellow
 130:	82 e0       	ldi	r24, 0x02	; 2
 132:	8b bb       	out	0x1b, r24	; 27
		break;
		
	}
Delayf();}
 134:	0e 94 3e 00 	call	0x7c	; 0x7c <Delayf>
 138:	08 95       	ret

0000013a <blinking2>:

void blinking2(){
	switch (Flag_b_2)
 13a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Flag_b_2>
 13e:	81 30       	cpi	r24, 0x01	; 1
 140:	49 f0       	breq	.+18     	; 0x154 <blinking2+0x1a>
 142:	28 f0       	brcs	.+10     	; 0x14e <blinking2+0x14>
 144:	82 30       	cpi	r24, 0x02	; 2
 146:	49 f0       	breq	.+18     	; 0x15a <blinking2+0x20>
 148:	84 30       	cpi	r24, 0x04	; 4
 14a:	51 f0       	breq	.+20     	; 0x160 <blinking2+0x26>
 14c:	0b c0       	rjmp	.+22     	; 0x164 <blinking2+0x2a>
	{
		case 0:
		PORTB = 0b00000100; // Green
 14e:	84 e0       	ldi	r24, 0x04	; 4
 150:	88 bb       	out	0x18, r24	; 24
		break;
 152:	08 95       	ret
		case 1:
		PORTB = 0b00000010; // Yellow
 154:	82 e0       	ldi	r24, 0x02	; 2
 156:	88 bb       	out	0x18, r24	; 24
		break;
 158:	08 95       	ret
		case 2:
		PORTB = 0b00000001; // Red
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	88 bb       	out	0x18, r24	; 24
		break;
 15e:	08 95       	ret
		case 4:
		PORTB = 0b00000000; // off
 160:	18 ba       	out	0x18, r1	; 24
		break;
 162:	08 95       	ret
		default:
		PORTB = 0b00000010; // Yellow
 164:	82 e0       	ldi	r24, 0x02	; 2
 166:	88 bb       	out	0x18, r24	; 24
 168:	08 95       	ret

0000016a <__vector_1>:
		
	}}


	// Timer0 ISR
	ISR(INT0_vect){
 16a:	1f 92       	push	r1
 16c:	0f 92       	push	r0
 16e:	0f b6       	in	r0, 0x3f	; 63
 170:	0f 92       	push	r0
 172:	11 24       	eor	r1, r1
 174:	ff 92       	push	r15
 176:	0f 93       	push	r16
 178:	1f 93       	push	r17
 17a:	2f 93       	push	r18
 17c:	3f 93       	push	r19
 17e:	4f 93       	push	r20
 180:	5f 93       	push	r21
 182:	6f 93       	push	r22
 184:	7f 93       	push	r23
 186:	8f 93       	push	r24
 188:	9f 93       	push	r25
 18a:	af 93       	push	r26
 18c:	bf 93       	push	r27
 18e:	cf 93       	push	r28
 190:	df 93       	push	r29
 192:	ef 93       	push	r30
 194:	ff 93       	push	r31
		if ( Flag_b_1 ==2 ){
 196:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 19a:	82 30       	cpi	r24, 0x02	; 2
 19c:	19 f4       	brne	.+6      	; 0x1a4 <__vector_1+0x3a>
			Flag_b_2 = 0;
 19e:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <Flag_b_2>
 1a2:	4e c0       	rjmp	.+156    	; 0x240 <__vector_1+0xd6>
		}
		else if ( Flag_b_1 ==1 || Flag_b_1 ==0 )
 1a4:	82 30       	cpi	r24, 0x02	; 2
 1a6:	08 f0       	brcs	.+2      	; 0x1aa <__vector_1+0x40>
 1a8:	4b c0       	rjmp	.+150    	; 0x240 <__vector_1+0xd6>
		{
			
			Flag_b_2 = 2;  //red
 1aa:	c2 e0       	ldi	r28, 0x02	; 2
 1ac:	c0 93 61 00 	sts	0x0061, r28	; 0x800061 <Flag_b_2>
			blinking();
 1b0:	0e 94 83 00 	call	0x106	; 0x106 <blinking>
			blinking2();
 1b4:	0e 94 9d 00 	call	0x13a	; 0x13a <blinking2>

			// yellow blinking
			Delayf(); // 2.5 s
 1b8:	0e 94 3e 00 	call	0x7c	; 0x7c <Delayf>
			PORTB = 0b00000010;
 1bc:	c8 bb       	out	0x18, r28	; 24
			PORTA = 0b00000010;
 1be:	cb bb       	out	0x1b, r28	; 27
			Delayf(); // 2.5 s
 1c0:	0e 94 3e 00 	call	0x7c	; 0x7c <Delayf>
			PORTB = 0b00000000;
 1c4:	18 ba       	out	0x18, r1	; 24
			PORTA = 0b00000000;
 1c6:	1b ba       	out	0x1b, r1	; 27
			Delayf(); // 2.5 s
 1c8:	0e 94 3e 00 	call	0x7c	; 0x7c <Delayf>
			PORTB = 0b00000010;
 1cc:	c8 bb       	out	0x18, r28	; 24
			PORTA = 0b00000010;
 1ce:	cb bb       	out	0x1b, r28	; 27
			Delayf(); // 2.5 s
 1d0:	0e 94 3e 00 	call	0x7c	; 0x7c <Delayf>
			PORTB = 0b00000000;
 1d4:	18 ba       	out	0x18, r1	; 24
			PORTA = 0b00000000;
 1d6:	1b ba       	out	0x1b, r1	; 27
			Delayf(); // 2.5 s
 1d8:	0e 94 3e 00 	call	0x7c	; 0x7c <Delayf>
			
			// Green
			Flag_b_2 = 0;  //green
 1dc:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <Flag_b_2>
			Flag_b_1 = 2;   // red
 1e0:	c0 93 60 00 	sts	0x0060, r28	; 0x800060 <__DATA_REGION_ORIGIN__>
			blinking();
 1e4:	0e 94 83 00 	call	0x106	; 0x106 <blinking>
			blinking2();
 1e8:	0e 94 9d 00 	call	0x13a	; 0x13a <blinking2>

			Delayf(); // 2.5 s
 1ec:	0e 94 3e 00 	call	0x7c	; 0x7c <Delayf>
			Delayf(); // 2.5 s
 1f0:	0e 94 3e 00 	call	0x7c	; 0x7c <Delayf>
			Delayf(); // 2.5 s
 1f4:	0e 94 3e 00 	call	0x7c	; 0x7c <Delayf>
			
			PORTB = 0b00000110; 
 1f8:	16 e0       	ldi	r17, 0x06	; 6
 1fa:	18 bb       	out	0x18, r17	; 24
			PORTA = 0b00000011; 
 1fc:	d3 e0       	ldi	r29, 0x03	; 3
 1fe:	db bb       	out	0x1b, r29	; 27
			Delayf(); // 2.5 s
 200:	0e 94 3e 00 	call	0x7c	; 0x7c <Delayf>
			PORTB = 0b00000100; 
 204:	68 94       	set
 206:	ff 24       	eor	r15, r15
 208:	f2 f8       	bld	r15, 2
 20a:	f8 ba       	out	0x18, r15	; 24
			PORTA = 0b00000001; 
 20c:	01 e0       	ldi	r16, 0x01	; 1
 20e:	0b bb       	out	0x1b, r16	; 27
			Delayf(); // 2.5 s
 210:	0e 94 3e 00 	call	0x7c	; 0x7c <Delayf>
			PORTB = 0b00000110; 
 214:	18 bb       	out	0x18, r17	; 24
			PORTA = 0b00000011; 
 216:	db bb       	out	0x1b, r29	; 27
			Delayf(); // 2.5 s
 218:	0e 94 3e 00 	call	0x7c	; 0x7c <Delayf>
			PORTB = 0b00000100;
 21c:	f8 ba       	out	0x18, r15	; 24
			PORTA = 0b00000001;
 21e:	0b bb       	out	0x1b, r16	; 27
			Delayf(); // 2.5 s
 220:	0e 94 3e 00 	call	0x7c	; 0x7c <Delayf>
			PORTB = 0b00000110;
 224:	18 bb       	out	0x18, r17	; 24
			PORTA = 0b00000011;
 226:	db bb       	out	0x1b, r29	; 27
			
			Delayf(); // 2.5 s
 228:	0e 94 3e 00 	call	0x7c	; 0x7c <Delayf>
			Delayf(); // 2.5 s
 22c:	0e 94 3e 00 	call	0x7c	; 0x7c <Delayf>
			Flag_b_1 = 0;  //green
 230:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
			Flag_b_2 = 2;   // red
 234:	c0 93 61 00 	sts	0x0061, r28	; 0x800061 <Flag_b_2>
			blinking();
 238:	0e 94 83 00 	call	0x106	; 0x106 <blinking>
			blinking2();
 23c:	0e 94 9d 00 	call	0x13a	; 0x13a <blinking2>
			
		}}
 240:	ff 91       	pop	r31
 242:	ef 91       	pop	r30
 244:	df 91       	pop	r29
 246:	cf 91       	pop	r28
 248:	bf 91       	pop	r27
 24a:	af 91       	pop	r26
 24c:	9f 91       	pop	r25
 24e:	8f 91       	pop	r24
 250:	7f 91       	pop	r23
 252:	6f 91       	pop	r22
 254:	5f 91       	pop	r21
 256:	4f 91       	pop	r20
 258:	3f 91       	pop	r19
 25a:	2f 91       	pop	r18
 25c:	1f 91       	pop	r17
 25e:	0f 91       	pop	r16
 260:	ff 90       	pop	r15
 262:	0f 90       	pop	r0
 264:	0f be       	out	0x3f, r0	; 63
 266:	0f 90       	pop	r0
 268:	1f 90       	pop	r1
 26a:	18 95       	reti

0000026c <intilizer>:


		void intilizer(){
			Flag_b_1=0;  // Normal State
 26c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
			Flag_b_2=0;
 270:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <Flag_b_2>

			DDRA = 0xFF;
 274:	8f ef       	ldi	r24, 0xFF	; 255
 276:	8a bb       	out	0x1a, r24	; 26
			DDRB = 0xFF;
 278:	87 bb       	out	0x17, r24	; 23
			DDRD = 0x00;						  	/* PORTD as input */
 27a:	11 ba       	out	0x11, r1	; 17
			PORTD= 0xFF;					  	   /* Make pull up high */
 27c:	82 bb       	out	0x12, r24	; 18
			
			//timer 0
			GICR = 1<<INT0;				         	/* Enable INT0*/
 27e:	80 e4       	ldi	r24, 0x40	; 64
 280:	8b bf       	out	0x3b, r24	; 59
			MCUCR = 1<<ISC01 | 1<<ISC00;        	/* Trigger INT0 on rising edge */
 282:	83 e0       	ldi	r24, 0x03	; 3
 284:	85 bf       	out	0x35, r24	; 53
			
			// timer 1
			TCCR1B = (1<<CS10) | (1<<CS12); //set the pre-scalar as 1024
 286:	85 e0       	ldi	r24, 0x05	; 5
 288:	8e bd       	out	0x2e, r24	; 46
			OCR1A = 32750; 	   			//2.5 S delay
 28a:	8e ee       	ldi	r24, 0xEE	; 238
 28c:	9f e7       	ldi	r25, 0x7F	; 127
 28e:	9b bd       	out	0x2b, r25	; 43
 290:	8a bd       	out	0x2a, r24	; 42
			//OCR1A = 3905/2; //Use for Only testing 
			TCNT1 = 0;
 292:	1d bc       	out	0x2d, r1	; 45
 294:	1c bc       	out	0x2c, r1	; 44
			
			// enable global interrupts
			sei();
 296:	78 94       	sei
 298:	08 95       	ret

0000029a <App_start>:
		}
		void App_start(){
			while(1){blinking_norm();}
 29a:	0e 94 49 00 	call	0x92	; 0x92 <blinking_norm>
 29e:	fd cf       	rjmp	.-6      	; 0x29a <App_start>

000002a0 <main>:
#define F_CPU 800000UL
#include "./Layers/Application/app.h"
 
int main(void)
{
intilizer();
 2a0:	0e 94 36 01 	call	0x26c	; 0x26c <intilizer>
App_start();
 2a4:	0e 94 4d 01 	call	0x29a	; 0x29a <App_start>
return 0; 
}
 2a8:	80 e0       	ldi	r24, 0x00	; 0
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	08 95       	ret

000002ae <_exit>:
 2ae:	f8 94       	cli

000002b0 <__stop_program>:
 2b0:	ff cf       	rjmp	.-2      	; 0x2b0 <__stop_program>
